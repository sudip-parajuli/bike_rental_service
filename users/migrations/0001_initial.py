# Generated by Django 5.1.6 on 2025-02-12 08:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_owner', models.BooleanField(default=False, help_text='Indicates whether the user is a bike owner.')),
                ('phone_number', models.CharField(blank=True, help_text="User's phone number (optional).", max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must follow the international format (e.g., '+9779841234567').", regex='^\\+?[1-9]\\d{1,14}$')])),
                ('address', models.TextField(blank=True, help_text="User's address (optional).", null=True)),
                ('profile_picture', models.ImageField(default='default_.png', help_text='Profile image uploaded by the user.', upload_to='profile_pictures/')),
                ('date_of_birth', models.DateField(blank=True, help_text='Userâ€™s date of birth (optional).', null=True)),
                ('bio', models.TextField(blank=True, help_text='Short description about the user.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp for when the user was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp for the last update.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OwnerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earnings', models.DecimalField(decimal_places=2, default=0, help_text='Total earnings of the bike owner.', max_digits=10)),
                ('bank_account_details', models.TextField(blank=True, help_text='Bank account information for payouts.', null=True)),
                ('total_bookings', models.PositiveIntegerField(default=0, help_text="Total number of bookings made for the owner's bikes.")),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0, help_text='Total earnings from all bookings.', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp for when the profile was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp for the last update.')),
                ('user', models.OneToOneField(help_text='User associated with this profile.', on_delete=django.db.models.deletion.CASCADE, related_name='owner_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
